package ch.pschatzmann.edgar.service;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.stream.Collectors;

import javax.ws.rs.Consumes;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.CacheControl;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;

import org.apache.commons.jcs.JCS;
import org.apache.commons.jcs.access.CacheAccess;
import org.apache.log4j.Logger;

import ch.pschatzmann.common.table.FieldModelLastN;
import ch.pschatzmann.common.table.FieldModelTopN;
import ch.pschatzmann.common.table.FormatException;
import ch.pschatzmann.common.table.IFieldModel;
import ch.pschatzmann.common.table.ITable;
import ch.pschatzmann.common.table.ITableFormatter;
import ch.pschatzmann.common.table.TableFormatterCSV;
import ch.pschatzmann.common.table.TableFormatterHtml;
import ch.pschatzmann.common.table.TableFormatterJson;
import ch.pschatzmann.common.table.TableTopN;
import ch.pschatzmann.edgar.base.errors.DataException;
import ch.pschatzmann.edgar.reporting.EdgarModel;
import ch.pschatzmann.edgar.reporting.NavigationField;
import ch.pschatzmann.edgar.reporting.PostgresSQLModelPriorities;
import ch.pschatzmann.edgar.reporting.Table;
import ch.pschatzmann.edgar.reporting.TableFormatterSQL;
import ch.pschatzmann.edgar.reporting.company.CompanyEdgarValues;
import ch.pschatzmann.edgar.reporting.company.CompanySelection;
import ch.pschatzmann.edgar.reporting.company.FilterQuarterValues;
import ch.pschatzmann.edgar.reporting.company.FilterQuarterlyCumulated;
import ch.pschatzmann.edgar.reporting.company.FilterYearly;
import ch.pschatzmann.edgar.utils.Utils;

/**
 * REST webservice which provides access to the EdgarModel under the url /edgar.
 * E.g. /edgar/groups provides the list of all groups
 * 
 * @author pschatzmann
 *
 */
@Path("/edgar/db")
public class EdgarDBService {
	public enum PeriodFilter {
		Y, Q, QC
	}

	private final static Logger LOG = Logger.getLogger(EdgarDBService.class);
	private EdgarModel model = new EdgarModel();
	private CacheAccess<String, Object> cache = null;

	/**
	 * Constructor
	 * 
	 * @throws DataException
	 */
	public EdgarDBService() throws DataException {
		model.create();
		// we only select the entries for 12 months w/o segment information
		model.getTableField("values", "numberofmonths").setFilterValues(Arrays.asList("12"));
		model.getTableField("values", "segment").setFilterValues(Arrays.asList(""));
		model.getTableField("values", "segmentdimension").setFilterValues(Arrays.asList(""));
		// model.setSQLModel(new PostgresSQLModelExt(this.model));
		model.setSQLModel(new PostgresSQLModelPriorities(this.model));

		cache = JCS.getInstance("ws");

	}

	/**
	 * Provides the list of all field groups
	 * 
	 * @return
	 * @throws IOException
	 * @throws Exception
	 */
	@GET
	@Path("fieldGroups")
	@Produces({ MediaType.APPLICATION_JSON })
	public Response groups() throws IOException, Exception {
		long start = System.currentTimeMillis();
		List<String> result = model.getGroupings();
		LOG.info(Utils.runtime("groups", start));
		CacheControl cc = new CacheControl();
		cc.setMaxAge(60 * 60 * 12);
		return Response.ok(result).cacheControl(cc).build();
	}

	/**
	 * Finds all fields for a field group
	 * 
	 * @param group
	 * @return
	 * @throws IOException
	 * @throws Exception
	 */
	@GET
	@Path("fields")
	@Produces({ MediaType.APPLICATION_JSON })
	public Response fieldsForGroup(@QueryParam("group") String group) throws IOException, Exception {
		long start = System.currentTimeMillis();
		List<WSField> result = toWSFields(model.getNavigationFieldForGrouping(group));
		LOG.info(Utils.runtime("fields", start));
		CacheControl cc = new CacheControl();
		cc.setMaxAge(60 * 60 * 12);
		return Response.ok(result).cacheControl(cc).build();
	}

	/**
	 * finds an individual field
	 * 
	 * @param field
	 * @param table
	 * @param relationFromField
	 * @return
	 * @throws IOException
	 * @throws Exception
	 */
	@GET
	@Path("field/{fieldname}")
	@Produces({ MediaType.APPLICATION_JSON })
	public WSField field(@PathParam("fieldname") String field, @QueryParam("table") String table,
			@QueryParam("relationField") String relationFromField) throws IOException, Exception {
		long start = System.currentTimeMillis();
		NavigationField result = model.getNavigationField(table, field, relationFromField);
		LOG.info(Utils.runtime("field " + result, start));
		return toWSField(result);
	}

	/**
	 * Query the Edgar database and summarize the results by the indicated columns
	 * and rows. We support only then empty segmentDimension
	 * 
	 * @param headers
	 * @param requestedFormat
	 * @param row
	 * @param col
	 * @param parameterCSV
	 * @param parameterAsAlternative
	 * @param n
	 * @param uriInfo
	 * @return
	 * @throws DataException
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 * @throws FormatException 
	 */
	@GET
	@Path("values")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN, MediaType.TEXT_HTML, "application/x-sql" })
	public Response values(@Context HttpHeaders headers, @QueryParam("format") String requestedFormat,
			@DefaultValue("country") @QueryParam("row") String row, @DefaultValue("year") @QueryParam("col") String col,
			@QueryParam("parameter") String parameterCSV, @QueryParam("alt") boolean parameterAsAlternative,
			@DefaultValue("20") @QueryParam("n") int n, @Context UriInfo uriInfo)
			throws DataException, ClassNotFoundException, SQLException, FormatException {

		String format = Utils.isEmpty(requestedFormat)
				? getFormat(headers.getAcceptableMediaTypes().stream().findFirst().get())
				: requestedFormat;

		long start = System.currentTimeMillis();
		List<WSField> empty = new ArrayList();
		String key = getKey(uriInfo) + "/" + format;
		LOG.info(key);
		String result = (String) cache.get(key);
		if (Utils.isEmpty(result)) {
			Table table = new Table();
			table.setValueField(model.getTable("values").getValueField());
			parameterFilter(parameterCSV);
			parameterRows(row, empty, table);
			parameterColumns(col, empty, table);
			this.model.setParameterAsPriorityAlternatives(parameterAsAlternative);
			// only use empty segment dimensions
			model.getNavigationField(null, "segmentDimension", null).setFilterValues(Arrays.asList(""));
			model.getNavigationField(null, "form", null).setFilterValues(Arrays.asList("10-K"));
			model.getNavigationField(null, "numberOfMonths", null).setFilterValues(Arrays.asList("0", "12"));

			ITable iTable = table;
			if (!"sql".equalsIgnoreCase(format)) {
				table.execute(model);
				// reduce result to most important rows and columns
				IFieldModel colModel = this.getFieldModel(col);
				IFieldModel rowModel = this.getFieldModel(row);
				iTable = new TableTopN(table, n, colModel, rowModel);
			}
			result = this.formatTable(iTable, format);
			ITableFormatter formatter = getFormatter(format);
		}
		LOG.info(Utils.runtime("parameters", start));
		return Response.ok(result, getMediaType(format)).build();

	}

	/**
	 * Query the edgar database and summarize the results by the indicated columns
	 * and rows
	 *
	 * @param headers
	 * @param query
	 * @return
	 * @throws DataException
	 * @throws FormatException 
	 */

	@POST
	@Path("values")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN, MediaType.TEXT_HTML, "application/x-sql" })
	public Response valuesPost(@Context HttpHeaders headers, Query query) throws DataException, FormatException {
		long start = System.currentTimeMillis();

		String format = getFormat(headers.getAcceptableMediaTypes().stream().findFirst().get());
		LOG.info("Response format: " + format);
		String key = query.toString() + "/" + format;
		LOG.info("key: " + key);
		String result = Utils.isEmpty(key) ? "" : (String) cache.get(key);
		if (Utils.isEmpty(result)) {
			Table table = createTable(query);
			result = this.formatTable(table, format);
		}
		LOG.info(Utils.runtime("parameters", start));
		return Response.ok(result, getMediaType(format)).build();

	}

	private Table createTable(Query query) throws DataException {
		Table table = new Table();
		table.setValueField(model.getTable("values").getValueField());
		LOG.info("isParameterAsPriorityAlternatives: " + query.isParameterAsPriorityAlternatives());
		this.model.setParameterAsPriorityAlternatives(query.isParameterAsPriorityAlternatives());
		model.getNavigationField("values", "parametername", null).setFilterValues(query.getParameters());

		for (WSField wsrow : query.getFilter()) {
			NavigationField nf = model.getNavigationField(wsrow.getTable(), wsrow.getFieldName(),
					wsrow.getRelationName());
			nf.setFilterValues(wsrow.getFilterValues());
			nf.setFilterEquals(wsrow.isFilterEquals());
		}

		for (WSField wsrow : query.getRows()) {
			table.addRow(toNavigationField(wsrow));
		}

		for (WSField wscol : query.getCols()) {
			table.addColumn(toNavigationField(wscol));
		}
		return table;
	}

	private String getFormat(MediaType mediaType) {
		String result = mediaType.getSubtype();
		result = result.replaceAll("x-", "");
		if ("plain".equalsIgnoreCase(mediaType.getSubtype())) {
			result = "csv";
		}
		return result;
	}

	/**
	 * For date fields we show the last n values, otherwise we take the entres with
	 * the biggest values
	 * 
	 * @param col
	 * @return
	 */
	private IFieldModel getFieldModel(String col) {
		if (col.matches("date|dateLabel|year|month|rollingYear")) {
			return new FieldModelLastN();
		}
		return new FieldModelTopN();
	}

	private MediaType getMediaType(String format) {
		MediaType result;
		if (format.equals("json")) {
			result = MediaType.APPLICATION_JSON_TYPE;
		} else if (format.equalsIgnoreCase("html")) {
			result = MediaType.TEXT_HTML_TYPE;
		} else {
			result = MediaType.TEXT_PLAIN_TYPE;
		}
		return result;
	}

	private void parameterFilter(String parameter) throws DataException {
		if (!Utils.isEmpty(parameter)) {
			List<String> values = new ArrayList();
			for (String p : parameter.split(",")) {
				values.add(p.trim());
			}
			model.getNavigationField("values", "parametername", null).setFilterValues(values);
		} else {
			LOG.info("Using default parametName " + "Profit");
			// model.getNavigationField(null, "standardparameter",
			// null).setFilterValues(Arrays.asList("Profit"));
			model.getNavigationField("values", "parametername", null).setFilterValues(Arrays.asList("NetIncomeLoss"));
		}

	}

	private void parameterColumns(String col, List<WSField> cols, Table table) throws DataException {
		if (cols.isEmpty() && col == null) {
			LOG.info("Usng default column");
			table.addColumn(model.getNavigationField("values", "year", null));
		} else {
			for (WSField wscol : cols) {
				table.addColumn(toNavigationField(wscol));
			}
			NavigationField fld = model.getNavigationField(null, col, null);
			if (fld != null) {
				table.addColumn(fld);
			}
		}
	}

	private void parameterRows(String row, List<WSField> rows, Table table) throws DataException {
		if (rows.isEmpty() && row == null) {
			LOG.info("Usng default row");
			table.addRow(model.getNavigationField("states", "country", "location"));
		} else {
			for (WSField wsrow : rows) {
				table.addRow(toNavigationField(wsrow));
			}
			NavigationField fld = model.getNavigationField(null, row, null);
			if (fld != null) {
				table.addRow(fld);
			}
		}
	}

	private void parameterFilter(List<WSField> filter) throws DataException {
		if (!filter.isEmpty()) {
			for (WSField filterField : filter) {
				NavigationField fld = this.toNavigationField(filterField);
				if (fld != null) {
					List<String> values = filterField.getFilterValues();
					if (values != null && !values.isEmpty()) {
						fld.setFilterValues(values);
					}
				} else {
					LOG.warn("The filter values were ignored for " + filterField);
				}
			}
		}
	}

	/**
	 * Returns all available field values
	 * 
	 * @param fieldName
	 * @param tableName
	 * @param like
	 * @param count
	 * @return
	 * @throws DataException
	 */
	@GET
	@Path("fieldValues/{fieldname}")
	@Produces({ MediaType.APPLICATION_JSON })
	public Response fieldValues(@PathParam("fieldname") String fieldName, @QueryParam("table") String tableName,
			@QueryParam("like") String like, @DefaultValue("1000") @QueryParam("count") int count)
			throws DataException {

		long start = System.currentTimeMillis();

		String key = getKey(tableName, fieldName);
		List<String> result = (List<String>) cache.get(key);
		if (result == null || result.isEmpty()) {
			LOG.info(key + " -> from database");
			result = model.getFieldValues(tableName, fieldName, "");
			Collections.sort(result);
			cache.put(key, result);
		}

		if (!Utils.isEmpty(like)) {
			// apply regex filter
			result = result.stream().filter(s -> s.matches(like)).collect(Collectors.toList());
		}

		if (!result.isEmpty()) {
			result = result.subList(0, Math.min(count, result.size() - 1));
		}

		LOG.info(Utils.runtime("parameters", start));
		CacheControl cc = new CacheControl();
		cc.setMaxAge(60 * 60 * 12);
		return Response.ok(result).cacheControl(cc).build();
	}

	private String getKey(String tableName, String fieldName) {
		WSField wsField1 = new WSField(tableName, fieldName);
		String key = wsField1.toString();
		return key;
	}

	private String getKey(UriInfo uriInfo) {
		String key = uriInfo.getRequestUri().toString();
		return key;
	}

	/**
	 * Determines the formatter
	 * 
	 * @param format
	 * @return
	 */
	private ITableFormatter getFormatter(String format) {
		ITableFormatter formatter = null;
		if (format != null) {
			if (format.equalsIgnoreCase("csv")) {
				formatter = new TableFormatterCSV();
			} else if (format.equalsIgnoreCase("json")) {
				formatter = new TableFormatterJson();
			} else if (format.equalsIgnoreCase("html")) {
				formatter = new TableFormatterHtml();
			} else if (format.equalsIgnoreCase("sql")) {
				formatter = new TableFormatterSQL(model);
			}
		}
		if (formatter == null) {
			LOG.info("Using the default formatter");
			formatter = new TableFormatterCSV();
		}
		return formatter;
	}

	/**
	 * Convert NavigationField to wrapper class
	 * 
	 * @param nv
	 * @return
	 */
	protected WSField toWSField(NavigationField nv) {
		WSField result = new WSField();
		result.setTable(nv.getTable().getTableName());
		result.setFieldName(nv.getFieldName());
		result.setRelationName(nv.getToRelation() != null ? nv.getToRelation().getName() : null);
		return result;
	}

	/**
	 * Convert list of NavigationField to wrapper class
	 * 
	 * @param nv
	 * @return
	 */
	protected List<WSField> toWSFields(List<NavigationField> nv) {
		return nv.stream().map(i -> toWSField(i)).collect(Collectors.toList());
	}

	/**
	 * Convert wrapper class to NavigationField
	 * 
	 * @param fld
	 * @return
	 * @throws DataException
	 */
	public NavigationField toNavigationField(WSField fld) throws DataException {
		return model.getNavigationField(fld.getTable(), fld.getFieldName(), fld.getRelationName());
	}

	/**
	 * Provides as a result the information for a company as a table where the
	 * columns represent parameters and the rows the period data.
	 * 
	 * @param headers
	 * @param requestedFormat
	 * @param identifier
	 * @param tradingSymbol
	 * @param periodFilter
	 * @param parameterNames
	 * @param uriInfo
	 * @return
	 * @throws DataException
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 * @throws FormatException 
	 */

	@GET
	@Path("companyValues")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN, MediaType.TEXT_HTML, "application/x-sql" })
	public Response companyValues(@Context HttpHeaders headers, @QueryParam("format") String requestedFormat,
			@QueryParam("identifier") String identifier, @QueryParam("tradingSymbol") String tradingSymbol,
			@QueryParam("periods") @DefaultValue("Y") PeriodFilter periods,
			@QueryParam("parameters") List<String> parameterNames, @Context UriInfo uriInfo)
			throws DataException, ClassNotFoundException, SQLException, FormatException {

		CompanyQuery req = new CompanyQuery();
		req.setFormat(requestedFormat);
		req.setPeriods(periods);
		req.setParameters(parameterNames);
		req.setCompanySelection(new CompanySelection().setIdentifier(identifier).setTradingSymbol(tradingSymbol));

		return companyValuesPost(headers, req, uriInfo);
	}

	/**
	 * Provides as a result the information for a company as a table where the
	 * columns represent parameters and the rows the period data. We also support
	 * calculated parameter values
	 * 
	 * @param headers
	 * @param req
	 * @param uriInfo
	 * @return
	 * @throws DataException
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 * @throws FormatException 
	 */

	@POST
	@Path("companyValues")
	@Produces({ MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN, MediaType.TEXT_HTML, "application/x-sql" })
	public Response companyValuesPost(@Context HttpHeaders headers, CompanyQuery req, @Context UriInfo uriInfo)
			throws DataException, ClassNotFoundException, SQLException, FormatException {

		String key = req.toString();
		ITable table = (ITable) this.cache.get(key);
		if (table == null) {
			BiFunction<ITable, Integer, Boolean> filter = getPeriodFilter(req.getPeriods());
			CompanyEdgarValues companyValues = new CompanyEdgarValues(req.getCompanySelection())
					.setFilter(filter, true)
					.setParameterNames(req.getParameters())
					.addFormulas(req.getFormulas());

			table = companyValues.getTable();
			cache.put(key, table);
		}
		String format = Utils.isEmpty(req.getFormat())
				? getFormat(headers.getAcceptableMediaTypes().stream().findFirst().get())
				: req.getFormat();
		String result = formatTable(table, format);
		return Response.ok(result, getMediaType(format)).build();

	}

	protected String formatTable(ITable table, String format) throws FormatException {
		String result;
		ITableFormatter formatter = getFormatter(format);
		result = formatter.format(table);
		return result;
	}

	protected BiFunction<ITable, Integer, Boolean> getPeriodFilter(PeriodFilter periodFilter) {
		BiFunction<ITable, Integer, Boolean> filter = new FilterYearly();
		if (periodFilter!=null) {
			switch (periodFilter) {
			case Y:
				filter = new FilterYearly();
				break;
			case Q:
				filter = new FilterQuarterValues();
				break;
			case QC:
				filter = new FilterQuarterlyCumulated();
				break;
			default:
				filter = new FilterYearly();
				break;
	
			}
		}
		return filter;
	}

	/**
	 * Information which is necessary to request the companyValues Webservice
	 * 
	 * @author pschatzmann
	 *
	 */
	public static class CompanyQuery {
		private CompanySelection companySelection;
		private String format;
		private PeriodFilter periods;
		private List<String> parameters;
		private Map<String, String> formulas;

		public CompanyQuery() {
		}

		public CompanySelection getCompanySelection() {
			return companySelection;
		}

		public void setCompanySelection(CompanySelection companySelection) {
			this.companySelection = companySelection;
		}

		public String getFormat() {
			return format;
		}

		public void setFormat(String format) {
			this.format = format;
		}

		public PeriodFilter getPeriods() {
			return periods;
		}

		public void setPeriods(PeriodFilter periods) {
			this.periods = periods;
		}

		public List<String> getParameters() {
			return parameters;
		}

		public void setParameters(List<String> parameters) {
			this.parameters = parameters;
		}

		public Map<String, String> getFormulas() {
			return formulas;
		}

		public void setFormulas(Map<String, String> formulas) {
			this.formulas = formulas;
		}

		public String toString() {
			StringBuffer sb = new StringBuffer();
			sb.append("CompanyValuesRequest:");
			sb.append(this.getPeriods());
			sb.append("/");
			sb.append(this.getCompanySelection());
			sb.append("/");
			sb.append(this.getParameters());
			sb.append("/");
			sb.append(this.getFormulas());
			return sb.toString();
		}
	}

}
