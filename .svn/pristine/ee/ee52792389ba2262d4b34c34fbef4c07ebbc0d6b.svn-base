package ch.pschatzmann.edgar.reporting.company;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.OptionalDouble;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiFunction;
import java.util.stream.Collectors;

import ch.pschatzmann.common.table.ITable;

/**
 * Returns all 10-K entries for 12 months or 0 months. We need to filter out all
 * balance sheet values which have been reported by 10-K for the quarters
 * because we just want to have the end of year values
 * 
 * @author pschatzmann
 *
 */
public class FilterYearly implements BiFunction<ITable, Integer, Boolean> {
	private ITable table;
	private int formPos;
	private int monthsPos;
	private int datePos;
	private Set<String> validDates = new TreeSet();
	private DateFormat df = new SimpleDateFormat("yyyy-MM-dd");

	public FilterYearly() {
	}

	@Override
	public Boolean apply(ITable table, Integer row) {
		setup(table);
		List<String> values = table.getRowValue(row);
		return validDates.contains(values.get(datePos)) && values.get(formPos).equals("10-K")
				&& values.get(monthsPos).matches("12|0");
	}

	protected void setup(ITable table) {
		if (this.table != table) {
			this.table = table;
			formPos = table.getRowFieldNames().indexOf("form");
			monthsPos = table.getRowFieldNames().indexOf("numberOfMonths");
			datePos = table.getRowFieldNames().indexOf("date");
			if (monthsPos < 0) {
				throw new RuntimeException("The table needs to contain the field 'numberOfMonths'");
			}
			if (formPos < 0) {
				throw new RuntimeException("The table needs to contain the field 'form'");
			}
			if (datePos < 0) {
				throw new RuntimeException("The table needs to contain the field 'date'");
			}

			for (int j = 0; j < table.getRowCount(); j++) {
				List<String> values = table.getRowValue(j);
				if (values.get(formPos).equals("10-K") && values.get(monthsPos).equals("12")) {
					validDates.add(values.get(datePos));
				}
			}

			OptionalDouble avg = validDates.stream().mapToInt(d -> getWeekOfYear(d)).average();
			if (avg.isPresent()) {
				double avgDouble = avg.getAsDouble();
				validDates = validDates.stream()
						.filter(d -> inRangeWeekOfYear(d, avgDouble-4.0, avgDouble+4.0))
						.collect(Collectors.toSet());
			}

		}
	}

	protected boolean inRangeWeekOfYear(String date,double min, double max) {
		try {
			GregorianCalendar calendar = new GregorianCalendar();
			calendar.setTime(df.parse(date));
			int value = calendar.get(GregorianCalendar.WEEK_OF_YEAR);
			return value > min && value < max;
		} catch (Exception ex) {
			return false;
		}
	}

	
	protected int getWeekOfYear(String date) {
		try {
			GregorianCalendar calendar = new GregorianCalendar();
			calendar.setTime(df.parse(date));
			return calendar.get(GregorianCalendar.WEEK_OF_YEAR);
		} catch (Exception ex) {
			return -1;
		}
	}

}
