package ch.pschatzmann.edgar.service;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Serializable;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Application;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.StreamingOutput;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.jcs.JCS;
import org.apache.commons.jcs.access.CacheAccess;
import org.apache.log4j.Logger;
import org.glassfish.jersey.server.ChunkedOutput;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import ch.pschatzmann.edgar.base.CompanyInfo;
//import ch.pschatzmann.edgar.base.Context;
import ch.pschatzmann.edgar.base.Fact.DataType;
import ch.pschatzmann.edgar.base.Fact.Type;
import ch.pschatzmann.edgar.base.FactValue;
import ch.pschatzmann.edgar.base.Presentation;
import ch.pschatzmann.edgar.base.PresentationAPI;
import ch.pschatzmann.edgar.base.XBRL;
import ch.pschatzmann.edgar.base.XBRL.SegmentScope;
import ch.pschatzmann.edgar.base.errors.XBRLException;
import ch.pschatzmann.edgar.utils.Utils;

/**
 * REST service which provides the content of xbrl files as json
 * 
 * @author pschatzmann
 *
 */
@Path("/edgar/files")
public class EdgarFileService implements Serializable {
	private final static Logger LOG = Logger.getLogger(EdgarFileService.class);
	private static String destinationFolder = Utils.getProperty("destinationFolder","/data/SmartEdgar");
	private transient CacheAccess<String, XBRL> cache = null;
	private static final ExecutorService executor = Executors.newCachedThreadPool();

	public EdgarFileService() {
		LOG.info("EdgarFileService");
		cache = JCS.getInstance("default");
	}

	/**
	 * Determines all existing companies (cik numbers)
	 * 
	 * @return
	 * @throws IOException
	 */
	@GET
	@Path("/companies")
	@Produces({ MediaType.APPLICATION_JSON })
	public static List<String> getCompanies() throws Exception {
		LOG.info("/companies");

		List<String> result = new ArrayList();
		File[] filesList = new File(destinationFolder).listFiles();
		if (filesList != null) {
			for (File f : filesList) {
				if (f.isDirectory()) {
					result.add(f.getName());
				}
			}
		}
		result.sort(new Comparator() {
			@Override
			public int compare(Object o1, Object o2) {
				return Long.valueOf((String) o1).compareTo(Long.valueOf((String) o2));
			}
		});
		return result;
	}

	/**
	 * Determines all filings for a company (identified by the cikNumber)
	 * 
	 * @param companyNr
	 * @param fast
	 * @return
	 * @throws Exception
	 */
	@GET
	@Path("/filings/{companyNr}")
	@Produces({ MediaType.APPLICATION_JSON })
	public List<String> getFilings(@PathParam("companyNr") String companyNr,
			@PathParam("fast") @DefaultValue("false") boolean fast) throws Exception {
		
		LOG.info("/filings/"+companyNr);
		// direct access with company number
		List<String> result = this.getFilings(companyNr);
		// alternative access with regex
		if (result.isEmpty()) {
			for (String company : getCompanies()) {
				LOG.info(company);
				result.addAll(getFilings(company, fast, companyNr));
			}
		}
		return result;
	}

	/**
	 * Returns the values nodes of an individual filing
	 * 
	 * @param headers
	 * @param filing
	 * @param dataType
	 * @return
	 * @throws Exception
	 */
	@GET
	@Path("/values/{filing}")
	@Produces({ MediaType.APPLICATION_JSON })
	public Response values(@javax.ws.rs.core.Context HttpHeaders headers,
		@PathParam("filing") String filing, @QueryParam("dataType") DataType dataType) throws Exception {

		LOG.info("/values/"+filing);
		MediaType format = headers.getAcceptableMediaTypes().stream().findFirst().get();
		XBRL xbrl = getXBRL(getFilings(filing));
		List<FactValue> result = xbrl.findValues();
		if (dataType != null && dataType != DataType.undefined) {
			result = result.stream().filter(p -> p.getDataType() == dataType).collect(Collectors.toList());
		}
		return Response.ok(result, MediaType.APPLICATION_JSON).build();
	}
	
	/**
	 * Returns the values nodes of an individual filing
	 * 
	 * @param headers
	 * @param filing
	 * @param dataType
	 * @return
	 * @throws Exception
	 */
	@GET
	@Path("/file/{filing}")
	@Produces({  "application/zip" })
	public Response filing(@javax.ws.rs.core.Context HttpHeaders headers,
			@PathParam("filing") String filing, @QueryParam("dataType") DataType dataType) throws Exception {

		LOG.info("/values/"+filing);
		MediaType format = headers.getAcceptableMediaTypes().stream().findFirst().get();
		File file = this.getFile(filing);
		return Response.ok(file, new MediaType("application", "zip")).build();
	}



	/**
	 * Returns the presentation information from a filing
	 * 
	 * @param cikNumber
	 * @param filing
	 * @param specialAxis
	 * @return
	 * @throws Exception
	 */

	@GET
	@Path("/presentation/{filing}")
	@Produces({ MediaType.APPLICATION_JSON })
	public List<Presentation> presentation(@PathParam("companyNr") String cikNumber, @PathParam("filing") String filing,
			@QueryParam("specialAxis") @DefaultValue("false") boolean specialAxis) throws Exception {
		LOG.info("/presentation/"+filing);
		XBRL xbrl = getXBRL(getFilings(filing));
		PresentationAPI api = xbrl.getPresentationAPI();
		return api.getChildrenEx();
	}

	/**
	 * Provides the company information from a filing
	 * 
	 * @param cikNumber
	 * @param filing
	 * @return
	 * @throws Exception
	 */
	@GET
	@Path("/company/{filing}")
	@Produces({ MediaType.APPLICATION_JSON })
	public CompanyInfo company(@PathParam("companyNr") String cikNumber, @PathParam("filing") String filing)
			throws Exception {
		LOG.info("/company/"+filing);
		XBRL xbrl = getXBRL(getFilings(filing));
		return xbrl.getCompanyInfo();
	}

	/**
	 * Provides the context information from the filing
	 * 
	 * @param cikNumber
	 * @param filing
	 * @param scope
	 * @return
	 * @throws Exception
	 */
	@GET
	@Path("/context/{filing}")
	@Produces({ MediaType.APPLICATION_JSON })
	public List<ch.pschatzmann.edgar.base.Context> context(@PathParam("companyNr") String cikNumber,
			@PathParam("filing") String filing,
			@QueryParam("segmentScope") @DefaultValue("WithoutSegments") SegmentScope scope) throws Exception {
		LOG.info("/context/"+filing);
		XBRL xbrl = getXBRL(getFilings(filing));
		return xbrl.getContext(scope);
	}

	/**
	 * Returns the Label and Parent Labels. This is intended to be used as input for
	 * a Neural Network in order to a classification
	 * 
	 * @param filingRegex
	 * @return
	 * @throws Exception
	 */
	@GET
	@Path("/classification")
	@Produces({ MediaType.TEXT_PLAIN })
	public Response classification(@QueryParam("filingRegex") @DefaultValue(".*10-K.*") String filingRegex,
			@QueryParam("fast") @DefaultValue("true") boolean fast,
			@QueryParam("withTradingSymbolOnly") @DefaultValue("true") boolean withTradingSymbolOnly,
			@QueryParam("limit") long limit) throws Exception {

		LOG.info("/classification");
		// collect fillings to prevent timeout
		List<String> filings = getFilings(filingRegex, fast);
		LOG.info("Number of filings " + filings.size());
		StreamingOutput output = new StreamingOutput() {
			long count = 0;

			public void write(OutputStream output) throws IOException, WebApplicationException {
				try {
					write(filings, output);
				} catch (Exception e) {
					throw new WebApplicationException(e);
				}
			}

			private void write(List<String> filings, final OutputStream output) {
				try (OutputStream out = output) {
					StringBuffer sb = new StringBuffer();
					sb.append("label");
					sb.append(";");
					sb.append("parentLabel");
					sb.append(";");
					sb.append("level1");
					sb.append(";");
					sb.append("name");
					sb.append(";");
					sb.append("parentName");
					sb.append(";");
					sb.append("level1Name");
					sb.append(System.lineSeparator());
					out.write(sb.toString().getBytes());

					for (String filing : filings) {
						LOG.info(filing);
						try {
							XBRL xbrl = new XBRL();
							xbrl.setIgnoreHtml(false);
							xbrl.setSetupValueAttributes(false);
							xbrl.setExtendedCompanyInformation(false);
							xbrl.load(getFile(filing));

							if (!Utils.isEmpty(xbrl.getTradingSymbol()) || !withTradingSymbolOnly) {
								for (Presentation p : xbrl.getPresentationAPI().getChildrenEx()) {
									Presentation p1 = p.getLevel1();
									sb.setLength(0);
									sb.append(p.getLabel().replaceAll(";", ","));
									sb.append(";");
									sb.append(
											p.getParent() == null ? "" : p.getParent().getLabel().replaceAll(";", ","));
									sb.append(";");
									sb.append(p1 != null ? p1.getLabel().replaceAll(";", ",") : "");
									sb.append(";");
									sb.append(p.getName());
									sb.append(";");
									sb.append(p.getParentName());
									sb.append(";");
									sb.append(p1 != null ? p1.getName() : "");
									sb.append(System.lineSeparator());
									out.write(sb.toString().getBytes());
									count++;
								}
								LOG.info("-> Processed");
							} else {
								LOG.info("-> Ignored");
							}
							xbrl.close();
						} catch (IOException ex) {
							throw ex;
						} catch (Exception ex) {
							LOG.error(ex, ex);
						}

						if (limit > 0l && count > limit) {
							break;
						}

					}
				} catch (Exception ex) {
					LOG.error(ex, ex);
				} finally {
					try {
						LOG.info("Closing output");
						output.close();
					} catch (IOException e) {
					}
				}
			}
		};

		return Response.ok(output).build();

	}

	/**
	 * Returns the filings for the indicated company
	 * @param cikNumberOrFiling
	 * @return
	 */
	public List<String> getFilings(String cikNumberOrFiling)  {
		if (cikNumberOrFiling.contains("-")) {
			return Arrays.asList(cikNumberOrFiling);
		}

		
		List<String> result = new ArrayList();
		File[] filesList = new File(destinationFolder + "/" + cikNumberOrFiling).listFiles();
		if (filesList!=null) {
			for (File f : filesList) {
				if (f.isFile() && f.getName().endsWith(".zip")) {
					result.add(f.getName().replace(".zip", ""));
				}
			}
			result.sort(Collator.getInstance());
		}
		return result;
	}

	/**
	 * If fast we return only the last filing - otherwise we return all filings
	 * 
	 * @param company
	 * @param fast
	 * @return
	 * @throws Exception
	 */
	private Collection<String> getFilings(String company, boolean fast, String filingRegex) throws Exception {
		List<String> result = new ArrayList();
		for (String filing : getFilings(company)) {
			if (filing.matches(filingRegex)) {
				LOG.info(filing);
				result.add(filing);
			}
		}

		return fast && !result.isEmpty() ? Arrays.asList(result.get(result.size() - 1)) : result;
	}

	public static File getFile(String filing) {
		String company = filing.substring(0, filing.indexOf("-"));
		return new File(destinationFolder + "/" + company + "/" + filing + ".zip");
	}

	public XBRL getXBRL(String filing) throws SAXException, IOException, ParserConfigurationException {
		return getXBRL(Arrays.asList(filing), 1024);
	}

	public XBRL getXBRL(Collection<String> filings) throws SAXException, IOException, ParserConfigurationException {
		return getXBRL(filings, 1024);
	}
	
	public XBRL getXBRL(Collection<String> filings, int maxLength) throws SAXException, IOException, ParserConfigurationException {
		XBRL xbrl = null;
		String key = filings.toString();
		try {
			xbrl = cache.get(key);
		} catch (Exception ex) {
		}
		if (xbrl == null) {
			xbrl = new XBRL();
			xbrl.setIgnoreHtml(false);
			xbrl.setMaxFieldSize(maxLength);
			for (String filing : filings) {
				xbrl.load(getFile(filing));
			}
			
			if (cache != null) {
				cache.put(key, xbrl);
			}

		}
		return xbrl;
	}

}
