package ch.pschatzmann.edgar.reporting.company;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.function.BiFunction;
import java.util.stream.DoubleStream;
import javax.script.Bindings;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.script.SimpleBindings;
import org.apache.log4j.Logger;

import ch.pschatzmann.common.table.ITableEx;
import ch.pschatzmann.common.table.ITable;
import ch.pschatzmann.edgar.reporting.Table;

/**
 * Support for calculated KPIs. The parameters are represented as columns. The
 * time dimension is represented by the rows. We use javascript to evaluate the
 * formulas per row.
 * 
 * @author pschatzmann
 *
 */
public class Calculations implements BiFunction<Integer, Integer, Number> {
	private static final Logger LOG = Logger.getLogger(Calculations.class);
	private ITableEx table;
	private BiFunction<Integer, Integer, Number> originalFunction;
	private ScriptEngine engine;
	private Map<String, String> calculatedColumns = new TreeMap();
	private List<Bindings> rowBindings = new ArrayList();
	private List<String> parameterNames = new ArrayList();

	/**
	 * Default Constructor
	 * 
	 * @param tableP
	 */
	public Calculations(ITableEx tableP, Map<String, String> calculatedColumns) {
		this.table = tableP;
		this.calculatedColumns = calculatedColumns;
		this.originalFunction = table.getValueFunction();
		// register calculate parameters
		calculatedColumns.keySet().forEach(parameterName -> table.addColumnKey(parameterName));

		// replace getValue functionality in table with our new implementation
		table.setValueFunction(this);
		ScriptEngineManager factory = new ScriptEngineManager();
		engine = factory.getEngineByName("JavaScript");

		// create bindings for all rows
		for (int row = 0; row < table.getRowCount(); row++) {
			rowBindings.add(new RowBindings(row));
		}
	}

	/**
	 * Returns all parameter names in the order of the displayed table
	 * 
	 * @return
	 */
	public List<String> getParameterNames() {
		if (this.parameterNames.isEmpty()) {
			for (int j = 0; j < table.getColumnCount(); j++) {
				parameterNames.add(table.getColumnValue(j).get(0));
			}
		}
		return this.parameterNames;
	}

	/**
	 * This method is used to drive the getValue method in the table with the
	 * extended functionality which is provided by this class
	 */
	@Override
	public Double apply(Integer row, Integer col) {
		String parameterName = getParameterNames().get(col);
		Number result = eval(row, parameterName);
		return result == null ? null : result.doubleValue();
	}

	protected Number eval(int row, String parameterName) {
		Number result = null;
		if (row > 0 && row < table.getRowCount()) {
			String formula = this.calculatedColumns.get(parameterName);
			result = (Number) (formula != null ? evalFormula(row, formula) : rowBindings.get(row).get(parameterName));
		}
		return result;
	}

	protected Number evalFormula(int row, String formula) {
		try {
			Object result = engine.eval(formula, rowBindings.get(row));
			return toNumber(result);
		} catch (ScriptException e) {
			LOG.error(e, e);
			return null;
		}
	}

	protected Number toNumber(Object value) {
		if (value == null)
			return null;
		return (value instanceof Number) ? (Number) value : Double.valueOf(value.toString());
	}

	/**
	 * Bindings which support parameters with an offset: e.g. NetSales-1 or
	 * NetSales+1 to address a different row
	 * 
	 * @author pschatzmann
	 *
	 */

	class RowBindings extends SimpleBindings {
		private int row = 0;

		public RowBindings(int row) {
			this.row = row;
			this.put("Edgar", new Math(row));
			List<String> parameterNames = getParameterNames();
			for (int j = 0; j < parameterNames.size(); j++) {
				Number val = originalFunction.apply(row, j);
				if (val != null) {
					this.put(parameterNames.get(j), val);
				}
			}
		}
	}

	/**
	 * Supported Custom Math functions
	 * 
	 * @author pschatzmann
	 *
	 */
	public class Math {
		private int row;

		public Math(int row) {
			this.row = row;
		}

		public Number coalesce(Object... ts) {
			for (Object t : ts) {
				Object v = eval(row, t.toString());
				Number n = toNumber(v);
				if (n != null)
					return n;
			}
			return null;
		}

		public Number min(Object... ts) {
			return values(ts).min().getAsDouble();
		}

		public Number max(Object... ts) {
			return values(ts).max().getAsDouble();
		}

		public Number sum(Object... ts) {
			return values(ts).sum();
		}

		public DoubleStream values(Object... ts) {
			List<Number> result = new ArrayList();
			for (Object t : ts) {
				Object v = eval(row, t.toString());
				if (v != null)
					result.add(toNumber(v));
			}
			return result.stream().mapToDouble(f -> f.doubleValue());
		}

		public int row() {
			return this.row;
		}

		public int count() {
			return table.getRowCount();
		}

		public Number lag(String parName, int offset) {
			return eval(this.row + offset, parName);
		}

		public Number row(String parName, int row) {
			return eval(row, parName);
		}

		public Number first(String parName) {
			return eval(0, parName);
		}

		public Number last(String parName) {
			return eval(table.getRowCount() - 1, parName);
		}

		public Number value(String parName) {
			return eval(row, parName);
		}

	}

}
