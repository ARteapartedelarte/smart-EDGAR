package ch.pschatzmann.edgar.reporting;

import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;

import ch.pschatzmann.common.table.ITable;
import ch.pschatzmann.edgar.base.errors.DataException;

/**
 * Implementation which supports the proper handling of alternative parameter
 * names
 * 
 * @author pschatzmann
 *
 */

public class PostgresSQLModelPriorities extends PostgresSQLModelExt {
	private static final Logger LOG = Logger.getLogger(PostgresSQLModelPriorities.class);
	private List<String> parameters = new ArrayList();

	/**
	 * Default Constructor
	 */
	public PostgresSQLModelPriorities(AbstractModel model) {
		super(model);
	}

	/**
	 * Generate SQL command based on the selected rows, column and value field
	 * When the standardparameter is used we execute the query in two steps.
	 * First we get the valid parameters per compny and then we consolidate the
	 * values
	 * 
	 * @return
	 * @throws DataException 
	 */
	@Override
	public String toSQL(ITable iTable) throws DataException {
		Table table = (Table) iTable;

		StringBuffer sb = new StringBuffer();		
		NavigationField parameterName = this.getModel().getNavigationField("values", "parameterName", null);
		this.setParameters(parameterName.getFilterValues());
		
		// if we have no alternatives it is more efficient to execute the standard logic
		if (withStandardParameter(table) || this.getParameters().size()<=1 || ! this.getModel().isParameterAsPriorityAlternatives()) {
			return super.toSQL(table);
		}
		
		// extended logic using the priorities in the mapping table
		sb.append("WITH companyValues as ( ");
		withMappings(sb);

		List<NavigationField> group = new ArrayList(table.getGroupFields());
		NavigationField identifier = this.getModel().getNavigationField("values", "identifier", null);
		NavigationField priority = this.getModel().getNavigationField("mappings", "priority", null);
		List<NavigationField> identifierAndGroups = new ArrayList<NavigationField>() {
			{
				add(identifier);
				group.remove(identifier);
				addAll(group);
			}
		};
		List<NavigationField> identifierAndGroupsAndPriority = new ArrayList<NavigationField>() {
			{
				addAll(identifierAndGroups);
				add(priority);
			}
		};

		sqlSelectFields(table, sb, identifierAndGroups, identifierAndGroups);
		sqlFrom(table, sb);
		sqlJoin(table, sb);
		sb.append(" INNER JOIN mappings ON (values.parameterName = mappings.parameter)");
		sqlWhere(sb);
		sqlGroupBy(table, identifierAndGroupsAndPriority, sb, true);

		sqlOrderBy(identifierAndGroupsAndPriority, sb);
		sb.append(" ) ");
		sqlSelectFields(table, sb, table.getGroupFields(), new ArrayList(), false);
		sb.append(" FROM companyValues ");
		sqlGroupBy(table, table.getGroupFields(), sb, false);

		String result = sb.toString();
		LOG.info(result);
		return result;
	}

	protected void withMappings(StringBuffer sb) {
		sb.append(" WITH mappings as ( select * from ( values ");
		int index = 1;
		for (String fld : this.getParameters()) {
			if (index > 1)
				sb.append(", ");
			sb.append("('");
			sb.append(fld.trim());
			sb.append("', ");
			sb.append(index++);
			sb.append(")");
		}
		sb.append(") as mappings (parameter, priority)) ");
	}

	public List<String> getParameters() {
		return parameters;
	}

	public void setParameters(List<String> parameters) {
		this.parameters = parameters;
	}
}
