package ch.pschatzmann.edgar.reporting.marketshare;

import java.sql.SQLException;
import java.util.List;

import ch.pschatzmann.common.table.ITable;
import ch.pschatzmann.edgar.base.errors.DataException;
import ch.pschatzmann.edgar.reporting.Table;

/**
 * Calculates the company sales as percent of the sales of the SIC Sector
 * 
 * @author pschatzmann
 *
 */
public class MarketShare implements ITable<Number> {
	private static final long serialVersionUID = 1L;
	private SalesByCompanyAndYear companySales;
	private SalesBySectorAndYear sectorSales;
	private Table table;

	public MarketShare() throws ClassNotFoundException, DataException, SQLException {
		this.companySales = new SalesByCompanyAndYear();
		this.table = companySales.getBaseTable();
		this.sectorSales = new SalesBySectorAndYear();
	}

	@Override
	public List getRowFieldNames() {
		return table.getRowFieldNames();
	}

	@Override
	public int getColumnCount() {
		return table.getColumnCount();
	}

	@Override
	public String getColumnTitle(int col) {
		return table.getColumnTitle(col);
	}

	@Override
	public int getRowCount() {
		return table.getRowCount();
	}

	@Override
	public List getRowValue(int row) {
		return table.getRowValue(row);
	}

	@Override
	public Number getValue(int col, int row) {
		Number result = 0.0;
		try {
			Number companySales = this.table.getValue(col, row);
			if (companySales != null) {
				String year = this.getColumnTitle(col);
				String sicCode = (String) this.getRowValue(row).get(2);
				Number sicValue = sectorSales.getTotalSales(year, sicCode);
				result = Math.round(companySales.doubleValue() / sicValue.doubleValue() * 100 * 100) / 100.00;
			}
		} catch (Exception ex) {
		}
		return result;
	}

	@Override
	public ITable<Number> getBaseTable() {
		return companySales;
	}
}
