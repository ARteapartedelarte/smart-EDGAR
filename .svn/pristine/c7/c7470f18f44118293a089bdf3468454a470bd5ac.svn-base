package ch.pschatzmann.edgar.table;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;

import ch.pschatzmann.common.table.ITable;
import ch.pschatzmann.common.table.ITableEx;
import ch.pschatzmann.common.table.Value;
import ch.pschatzmann.common.utils.Utils;

/**
 * Creates a 2 dimensional table from a list of maps. The parametername is
 * represented as map key which contains the corresponding parametervalue. 
 * The row key is defined in the constructor by providing a list of fieldnames
 * 
 * @author pschatzmann
 *
 */

public class TableFromMaps implements ITableEx<Value> {
	private static final long serialVersionUID = 1L;
	private List<String> rowFieldNames;
	private List<String> parameterNames = new ArrayList();
	private List<Key> rows = new ArrayList();
	private Map<CombinedKey, Value> valuesMap = new HashMap();
	private boolean addEmptyValues;
	/**
	 * Default Constructor
	 */
	public TableFromMaps(List<String> rowFieldNames, boolean addEmptyValues) {
		this.rowFieldNames = rowFieldNames;
		this.addEmptyValues = addEmptyValues;
	}

	/**
	 * Adds a value for a since cell
	 * 
	 * @param maps
	 */
	public void addValues(Collection<Map<String, String>> maps) {
		Set<Key> rows = new TreeSet();
		Set<String> parameters = new TreeSet();
		for (Map<String, String> record : maps) {
			Key row = this.getRowKey(record);
			this.rowFieldNames.forEach(fieldName -> record.remove(fieldName));
			for (Entry<String, String> e : record.entrySet()) {
				String parameter = e.getKey();
				Key col = this.getColKey(parameter);
				String strValue = e.getValue();
				if (this.addEmptyValues || !Utils.isEmpty(strValue)) {
					parameters.add(parameter);
					Value value = new Value(strValue);
					valuesMap.put(new CombinedKey(col, row), value);
				}
			}
			rows.add(row);
		}
		this.rows = new ArrayList(rows);
		this.parameterNames = new ArrayList(parameters);
	}

	/**
	 * Determines the row keys
	 * 
	 * @param record
	 * @return
	 */
	protected Key getRowKey(Map<String, String> record) {
		List<String> keyValues = this.getRowFieldNames().stream().map(field -> Utils.str(record.get(field)))
				.collect(Collectors.toList());
		Key rowKey = new Key(keyValues);
		return rowKey;
	}

	protected Key getColKey(String parameterName) {
		Key rowKey = new Key(Arrays.asList(parameterName));
		return rowKey;
	}

	@Override
	public List<String> getRowFieldNames() {
		return this.rowFieldNames;
	}

	@Override
	public int getColumnCount() {
		return this.parameterNames.size();
	}

	@Override
	public String getColumnTitle(int col) {
		return this.parameterNames.get(col);
	}

	@Override
	public int getRowCount() {
		return rows.size();
	}

	@Override
	public List<String> getRowValue(int row) {
		return rows.get(row).getKeyValues();
	}

	@Override
	public Value getValue(int col, int row) {
		Key rowKey = rows.get(row);
		Key colKey = this.getColKey(parameterNames.get(col));
		return valuesMap.get(new CombinedKey(colKey, rowKey));
	}

	@Override
	public ITable getBaseTable() {
		return this;
	}

	@Override
	public ITableEx<Value> addColumnKey(String parameterName) {
		if (!parameterNames.contains(parameterName))
			this.parameterNames.add(parameterName);
		return this;
	}
}
