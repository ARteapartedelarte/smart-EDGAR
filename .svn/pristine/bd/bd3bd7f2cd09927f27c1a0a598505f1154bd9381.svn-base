package ch.pschatzmann.edgar.base;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class StandardLabelAPI {
	private HashMap<String,Label> map = new HashMap();
	
	public class Label {
		private Collection<String> labels = new HashSet();
		private Collection<Label> children = new HashSet();
		private Collection<Label> parents = new HashSet();
		boolean leaf;
		private long count = 0;
		
		public Label(String l) {
			this.labels.add(l);
		}
		
		public String label() {
			return labels.iterator().next();
		}	
		
		public Collection<Label> getSiblings() {
			Collection<Label> siblings = new HashSet();
			for (Label parent : this.parents) {
				siblings.addAll(parent.children);
				siblings.remove(this);
			}
			return siblings;
		}
		
		public Collection<Label> getChildren() {
			return this.children;
		}
		
		public void merge(Label label) {
			labels.addAll(label.labels);
			children.addAll(label.children);
			parents.addAll(label.parents);	
			this.count += label.count;
		}
		
		public Set<Label> getCommonChildren(Label l) {
			Set<Label> set = new HashSet(this.children);
			set.retainAll(l.children);
			return set;
		}
		
		public List<Collection> getChildCombinations() {
			Set<Collection> set = new HashSet();
			for (Label l1 : children) {
				for (Label l2 : children) {
					if (l1!=l2) {
						Collection<Label> rec = new ArrayList();
						rec.add(l1);
						rec.add(l2);
						set.add(rec);
					}
				}
			}
			return new ArrayList(set);
		}
		
	}
	
	public void addLabel(String label, String parentLabel) {
		label = label == null ? "" : label;		
		Label l = map.get(label);
		if (l==null) {
			l = new Label(label);
			map.put(label, l);
		}
		l.count++;
		parentLabel = parentLabel == null ? "" : parentLabel;		
		Label lp = map.get(parentLabel);
		if (lp==null) {
			lp = new Label(parentLabel);
			map.put(parentLabel, lp);
		}
		lp.count++;
	}
	
	public Label getRoot() {
		return map.get("");
	}

	public void consolidate(int max) {
		consolidate(max, this.getRoot());
	}

	
	public void consolidate(int max, Label root) {
		Collection c = root.getChildren();
		if (c.size()>max) {
			Collections.sort(root.getChildCombinations(),new Comparator() {
				@Override
				public int compare(Object o1, Object o2) {
					return -((Label)o1).getCommonChildren((Label)o2).size();
				}});
			
			
		}
	}
	
	private void explode(Label node) {
		for (Label c : node.children) {
			if (c.children.isEmpty()) {
				node.leaf = true;
			}
			explode(node);
			
			if (node.leaf) {
				Set<String> titles = new HashSet();
				for (String l : node.labels) {
					titles.addAll(Arrays.asList(l.toLowerCase().split(" ")));
				}
				for (String title : titles) {
					Label label = new Label(title);
					node.children.add(label);
					label.parents.add(node);
					node.count++;
				}
			}
		}
	}	
	
}
