package ch.pschatzmann.edgar.dataload.online;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import ch.pschatzmann.edgar.base.ICompany;
import ch.pschatzmann.edgar.base.XBRL;


/**
 * CompanyInformation is using the https://www.sec.gov/cgi-bin/browse-edgar Online information to retrieve the
 * company information and filings for the company.
 * 
 * @author pschatzmann
 *
 */

public class CompanyInformation implements ICompany {
	private static final Logger LOG = Logger.getLogger(CompanyInformation.class);
	private Node companyInfo;
	private List<FilingEntry> entries;
	private XPathFactory xPathfactory;
	private DocumentBuilder builder;
	private String tickerOrCik;	
	private String forms[];

	/**
	 * Constructor
	 * @param tickerOrCik
	 * @throws XPathExpressionException
	 * @throws SAXException
	 * @throws IOException
	 * @throws ParserConfigurationException
	 */
	public CompanyInformation(String tickerOrCik, String...forms)
			throws XPathExpressionException, SAXException, IOException, ParserConfigurationException {
		this.tickerOrCik = tickerOrCik;
		this.forms = forms;
	}
	
	public CompanyInformation(String tickerOrCik)
			throws XPathExpressionException, SAXException, IOException, ParserConfigurationException {
		this.tickerOrCik = tickerOrCik;
		this.forms = new String[] {""};
	}


	private void setup() {
		try {
			if (builder==null) {
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
				builder = factory.newDocumentBuilder();
				xPathfactory = XPathFactory.newInstance();
		
				String url = getUrl(tickerOrCik,"----");
				LOG.info(url);
				Document doc = builder.parse(url);		
				XPathExpression exprCompany = xPathfactory.newXPath().compile("/feed/company-info");
				companyInfo = (Node) exprCompany.evaluate(doc, XPathConstants.NODE);		
			}
		} catch(Exception ex) {
			throw new RuntimeException(ex);
		}
	}
	
	protected void setupList() {
		try {
			if (entries==null) {
				entries = new ArrayList();
				for (String form : forms) {
					String nextUrl = this.getUrl(this.tickerOrCik, form);
					Document doc = builder.parse(nextUrl);		
					XPathExpression expr = xPathfactory.newXPath().compile("/feed/entry");
					
					// process subsequent pages
					while(nextUrl != null) {
						LOG.info(nextUrl);
						doc = builder.parse(nextUrl);
						processEntries(expr, doc);					
						nextUrl = getNextUrl(doc);
					}
				}
			} 	
		} catch(Exception ex) {
			throw new RuntimeException(ex);
		}
	}

	private NodeList processEntries(XPathExpression expr, Document doc) throws XPathExpressionException {
		NodeList currentEntries = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
		for (int j=0; j<currentEntries.getLength();j++) {
			entries.add(new FilingEntry(this, currentEntries.item(j)));
		}
		return currentEntries;
	}


	protected String getUrl(String tickerOrCik, String form) {
		String url = "https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK=%companyNr&type=%form&dateb=&owner=include&count=100&output=atom";
		url = url.replace("%companyNr", tickerOrCik);
		url = url.replace("%form", form);
		return url;
	}

	protected String getNextUrl(Document doc) throws XPathExpressionException {
		String url;
		XPathExpression nextExpr = xPathfactory.newXPath().compile("/feed/link[@rel='next']");
		Node next = (Node) nextExpr.evaluate(doc, XPathConstants.NODE);
		if (next!=null) {
			url = next.getAttributes().getNamedItem("href").getTextContent();
			url = url.replace("http://", "https://");
		} else {
			url = null;
		}
		return url;
	}
	

	protected String xpath(String xpathStr)  {
		try {
			setup();
			XPath xpath = xPathfactory.newXPath();
			XPathExpression expr = xpath.compile(xpathStr);
			return (String)expr.evaluate(companyInfo, XPathConstants.STRING);
		} catch(Exception ex) {
			throw new RuntimeException(ex);
		}
	}
	
	public String getIncorporationState() {
		return xpath("state-of-incorporation");
	}
	
	public String getLocationState() {
		return xpath("state-location");
	}

	public String getCompanyName() {
		return xpath("conformed-name");
	}

	public String getSICCode() {
		return xpath("assigned-sic");
	}

	public String getSICDescription() {
		return xpath("assigned-sic-desc");
	}

	public String getCompanyNumber() {
		return xpath("cik");
	}
	
	public String getFiscalYearEnd() {
		return xpath("fiscal-year-end");
	}
	
	public Stream<FilingEntry> stream(String formRegex) {
		return entries().stream().filter(p -> p.getForm().matches(formRegex));
	}

	public List<FilingEntry> entries(String formRegex) {
		return stream(formRegex).collect(Collectors.toList());
	}

	public List<FilingEntry> entries() {
		setup();
		setupList();
		return entries;
	}
	
	public Optional<FilingEntry> firstEntry(String regex) {
		return stream(regex).findFirst();
	}
	
	protected XPathFactory getXPathFactory() {
		return this.xPathfactory;
	}
	
	protected DocumentBuilder getDocumentBuilder() {
		return this.builder;
	}
	
	public XBRL getXBRL(String regex) {
		XBRL xbrl = new XBRL();
		this.entries(regex).forEach(e -> e.loadXBRL(xbrl));
		return xbrl;
	}
	
	public XBRL getXBRL() {
		XBRL xbrl = new XBRL();
		xbrl.setCompanyNumber(this.getCompanyNumber());
		this.entries().forEach(e -> e.loadXBRL(xbrl));
		return xbrl;
	}
	
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append(this.getCompanyName());
		sb.append(" (");
		sb.append(this.getCompanyNumber());
		sb.append(")");
		return sb.toString();
	}

}
