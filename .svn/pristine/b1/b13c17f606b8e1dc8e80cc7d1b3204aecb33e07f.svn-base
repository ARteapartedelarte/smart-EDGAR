package ch.pschatzmann.edgar.dataload;

import java.awt.List;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.SQLException;
import java.util.Collection;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.apache.log4j.Logger;
import org.jsoup.Jsoup;
import org.jsoup.select.Elements;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import com.rometools.rome.io.FeedException;

import ch.pschatzmann.edgar.base.EdgarCompany;
import ch.pschatzmann.edgar.base.errors.DataException;
import ch.pschatzmann.edgar.dataload.rss.FeedInfoRecord;
import ch.pschatzmann.edgar.dataload.rss.RSSDataSource;
import ch.pschatzmann.edgar.reporting.company.CompanySearch;
import ch.pschatzmann.edgar.utils.Utils;

/**
 * Update the ticker symbol from the ownership filings
 * 
 * @author pschatzmann
 *
 */

public class UpdateCompanyInfoTicker {
	private static final Logger LOG = Logger.getLogger(DownloadProcessorJDBC.class);
	private static TableFactory tableFactory = new TableFactory();

	public static void main(String[] args) {
		try {
			update();
		} catch (Exception ex) {
			LOG.error(ex, ex);
		}
	}

	public static void update() throws ClassNotFoundException, SQLException, SAXException, IOException, ParserConfigurationException, IllegalArgumentException, FeedException, DataException {
		tableFactory.openConnection();

		java.util.List<EdgarCompany> companies = new CompanySearch("tradingSymbol","").toListOfEdgarCompany();				
		for (EdgarCompany c : companies) {
			String tradingSymbol = new TradingSymbol(c.getCompanyNumber()).getTradingSymbol();

			EdgarCompany ci = new EdgarCompany(c.getCompanyNumber());
			if (!tradingSymbol.equals(ci.getTradingSymbol())) {
				ci.setTradingSymbol(tradingSymbol);
				ci.saveFile();
			}
						
			if (!Utils.isEmpty(tradingSymbol) && tradingSymbol.equals(c.getTradingSymbol())) {
				String sql = "update company set tradingSymbol='%ts' where identifier = '%id' ";
				sql = sql.replace("%id", c.getCompanyNumber());
				sql = sql.replace("%ts", tradingSymbol);
				LOG.info(sql);
				tableFactory.execute(sql);
				tableFactory.commit();
			}
		}
	}



}
