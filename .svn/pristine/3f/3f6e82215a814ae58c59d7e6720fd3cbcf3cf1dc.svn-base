package ch.pschatzmann.edgar.reporting.company;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;

import ch.pschatzmann.common.table.FilteredTable;
import ch.pschatzmann.common.table.FormatException;
import ch.pschatzmann.common.table.ITable;
import ch.pschatzmann.common.table.TableFormatterCSV;
import ch.pschatzmann.common.table.TableFormatterHtml;
import ch.pschatzmann.common.table.TableFormatterJson;
import ch.pschatzmann.edgar.base.errors.DataException;
import ch.pschatzmann.edgar.reporting.EdgarModel;
import ch.pschatzmann.edgar.reporting.NavigationField;
import ch.pschatzmann.edgar.reporting.Table;

/**
 * Provides the reported parameter values for a company by date. Per default we
 * use the QuarterlyCumulated filter
 * 
 * @author pschatzmann
 *
 */
public class CompanyEdgarValues {
	private Table table;
	private ITable filteredTable;
	private String unitRefArray[] = { "USD" };
	private String parameterNamesArray[] = null;
	private CompanySelection companySelection;
	private BiFunction<ITable, Integer, Boolean> filter = new FilterQuarterlyCumulated();
	
	public CompanyEdgarValues(String identifier) throws DataException, ClassNotFoundException, SQLException {
		this(new CompanySelection().setIdentifier(identifier));
	}

	public CompanyEdgarValues(CompanySelection companySelection)
			throws DataException, ClassNotFoundException, SQLException {
		if (!companySelection.isValid()) {
			throw new RuntimeException(
					"You must select a company by defining the identifier, companyName or tradingSymbol");
		}
		this.companySelection = companySelection;
	}

	protected void setup() throws DataException, SQLException, ClassNotFoundException {
		if (table == null) {
			EdgarModel model = new EdgarModel();
			model.setup();
			model.getTableField("values", "unitref").setFilterValues(Arrays.asList(unitRefArray));
			model.getTableField("values", "segment").setFilterValues(Arrays.asList(""));
			model.getTableField("values", "segmentdimension").setFilterValues(Arrays.asList(""));

			NavigationField companyName = model.getNavigationField("company", "companyName", null);
			NavigationField companyIdentifier = model.getNavigationField("values", "identifier", null);
			NavigationField companyTradingSymbol = model.getNavigationField("company", "tradingSymbol", null);
			NavigationField parameterNames = model.getNavigationField("values", "parameterName", null);

			if (!companySelection.getIdentifier().isEmpty())
				companyIdentifier.setFilterValues(Arrays.asList(companySelection.getIdentifier()));
			if (!companySelection.getCompanyName().isEmpty())
				companyName.setFilterValues(Arrays.asList(companySelection.getCompanyName()));
			if (!companySelection.getTradingSymbol().isEmpty())
				companyTradingSymbol.setFilterValues(Arrays.asList(companySelection.getTradingSymbol()));
			if (parameterNamesArray != null) {
				parameterNames.setFilterValues(Arrays.asList(parameterNamesArray));
			}

			table = new Table();
			table.setValueField(model.getTable("values").getValueField());
			table.addColumn(parameterNames);
			table.addRow(model.getNavigationField("values", "date", null));
			table.addRow(companyName);
			table.addRow(companyTradingSymbol);
			table.addRow(companyIdentifier);
			table.addRow(model.getNavigationField("company", "incorporation", null));
			table.addRow(model.getNavigationField("company", "location", null));
			table.addRow(model.getNavigationField("company", "sicDescription", null));
			table.addRow(model.getNavigationField("values", "form", null));
			table.addRow(model.getNavigationField("values", "numberOfMonths", null));
			table.execute(model);
			
			setFilter(filter);
		}
	}

	public CompanyEdgarValues setFilter(BiFunction<ITable, Integer, Boolean> filter) {
		this.filter = filter;
		this.filteredTable = new FilteredTable(this.table, filter);
		return this;
	}

	public CompanyEdgarValues setParameterNames(String... parameterNames) {
		this.table = null;
		this.parameterNamesArray = parameterNames;
		return this;
	}

	public CompanyEdgarValues setUnitRef(String... unitRef) {
		this.table = null;
		this.unitRefArray = unitRef;
		return this;
	}

	public String toCsv() throws FormatException, ClassNotFoundException, DataException, SQLException {
		setup();
		return new TableFormatterCSV().format(filteredTable);
	}

	public String toHtml() throws FormatException, ClassNotFoundException, DataException, SQLException {
		setup();
		return new TableFormatterHtml().format(filteredTable);
	}

	public String toJson() throws FormatException, ClassNotFoundException, DataException, SQLException {
		setup();
		return new TableFormatterJson().format(filteredTable);
	}

	public List<Map<String, ?>> toList() throws ClassNotFoundException, DataException, SQLException {
		setup();
		return this.filteredTable.toList();
	}

	public ITable getTable() throws ClassNotFoundException, DataException, SQLException {
		setup();
		return this.filteredTable;
	}

	public long size() throws ClassNotFoundException, DataException, SQLException {
		setup();
		return this.filteredTable.getRowCount();
	}

}
