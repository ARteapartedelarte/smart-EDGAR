package ch.pschatzmann.common.table;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import ch.pschatzmann.common.table.TableConsolidated.ConsolidationOperation;
import ch.pschatzmann.common.table.TableConsolidated.RowKey;

/**
 * Creates a 2 dimensional table from a list of maps
 * 
 * @author pschatzmann
 *
 */

public class TableWithValues  implements ITableEx<Value> {
	private static final long serialVersionUID = 1L;
	private TableConsolidated table;
	private List<String> keysToRemove;
	private String valueName;
	private String colName;
	private List<String> rowFieldNames;
	private List<String> colValues;

	/**
	 * Constructor w/o Data
	 */
	public TableWithValues(String valueName, String colName, List<String> keysToRemove, ConsolidationOperation operation) {
		this.keysToRemove = keysToRemove;
		this.valueName = valueName;
		this.colName = colName;
		this.table = new TableConsolidated(operation);
	}

	/**
	 * Adds a value for a since cell
	 * @param maps
	 */
	public void addValues(Collection<Map<String,String>> maps) {
		Set<String> fields = maps.stream().map(m -> m.keySet()).flatMap(l -> l.stream()).collect(Collectors.toSet());
		fields.removeAll(this.keysToRemove);
		fields.remove(this.valueName);
		fields.remove(this.colName);
		this.rowFieldNames = new ArrayList(fields);
		
		Set<String> colSet = maps.stream().map(m ->  m.get(this.colName)).collect(Collectors.toSet());
		this.colValues = new ArrayList(colSet);
		
		for (Map<String,String> record : maps) {
			RowKey row = this.getRowKey(record);
			int col = this.colValues.indexOf(record.get(this.colName));
			Value value = new Value(record.get(this.valueName));
			table.addValue(row, col, value);			
		}
		
	}
	
	/**
	 * Determines the row keys 
	 * @param record
	 * @return
	 */
	protected RowKey getRowKey(Map<String,String> record) {
		List<String> keyValues = this.rowFieldNames.stream().map(field -> record.get(field)).collect(Collectors.toList());
		RowKey rowKey = new RowKey(keyValues);
		return rowKey;
	}


	@Override
	public List<String> getRowFieldNames() {
		return this.rowFieldNames;
	}

	@Override
	public int getColumnCount() {
		return this.colValues.size();
	}

	@Override
	public String getColumnTitle(int col) {
		return this.colValues.get(col);
	}

	@Override
	public int getRowCount() {
		return table.getRowCount();
	}

	@Override
	public List<String> getRowValue(int row) {
		return table.getRowValue(row);
	}

	@Override
	public Value getValue(int col, int row) {
		return table.getValue(col, row);
	}

	@Override
	public ITable getBaseTable() {
		return this.table;
	}

	@Override
	public ITableEx<Value> addColumnKey(String parameterName) {
		this.rowFieldNames.add(parameterName);
		return this;
	}

}
