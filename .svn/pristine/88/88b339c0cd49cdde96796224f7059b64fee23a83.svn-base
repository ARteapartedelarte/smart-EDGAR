package ch.pschatzmann.edgar.table;

import org.apache.log4j.Logger;

import ch.pschatzmann.common.table.IFormulas;
import ch.pschatzmann.common.table.TableCalculated;
import ch.pschatzmann.edgar.base.Context;
import ch.pschatzmann.edgar.reporting.marketshare.MarketShare;

/**
 * Support for Forecasts, Surprises and Market Share calculations
 * 
 * @author pschatzmann
 *
 */
public class FormulasEdgar extends ch.pschatzmann.common.table.Formulas implements IFormulas {
	private static final Logger LOG = Logger.getLogger(FormulasEdgar.class);
	private Forecast forecast = null;
	private static MarketShare marketShare = null;

	public FormulasEdgar() {
	}

	private FormulasEdgar(TableCalculated table, int row) {
		super(table, row);
	}

	@Override
	public FormulasEdgar create (TableCalculated table, int row) {
		return new FormulasEdgar(table, row);
	}

	/**
	 * Forecasts the indicated parameter
	 * @param parName
	 * @return
	 */
	public Number forecast(String parName) {
		return forecast(parName, false);
	}

	/**
	 * Forecasts the indicated parameter
	 * @param parName
	 * @param seasonWithRegression
	 * @return
	 */
	public Number forecast(String parName, boolean seasonWithRegression) {
		if (forecast == null) {
			forecast = new Forecast(this.getTable(), seasonWithRegression);
		}
		return forecast.forecast(parName, super.row());
	}

	/**
	 * Calculate % difference to forecast
	 * @param parName
	 * @return
	 */
	public Number surprisePercent(String parName) {
		return surprisePercent(parName, false);
	}

	/**
	 * Calculate % difference to forecast
	 * @param parName
	 * @param seasonWithRegression
	 * @return
	 */
	public Number surprisePercent(String parName, boolean seasonWithRegression) {
		Number result = null;
		try {
			Number forecast = forecast(parName, seasonWithRegression);
			if (forecast != null) {
				double forecastDouble = forecast.doubleValue();
				result = (value(parName).doubleValue() - forecastDouble) / forecastDouble * 100;
			}
		} catch (Exception ex) {
			LOG.error(ex,ex);
		}
		return result;
	}

	/**
	 * Calculates the market share of the current company for the indicated year
	 * @return
	 */
	public Number marketShare()  {
		Number result = null;
		try {
			if (marketShare == null) {
				marketShare = new MarketShare();
			}
			String companyNr = this.getTable().getRowValue(this.row(),"identifier");
			String year = this.getTable().getRowValue(this.row(),"date").substring(0, 4);
			result = marketShare.getMarketShare(companyNr, year);
		} catch(Exception ex) {
			LOG.error(ex,ex);
		};
		return result;
	}

}