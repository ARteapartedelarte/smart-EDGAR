package ch.pschatzmann.edgar.test;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.junit.Assert;
import org.junit.Test;

import ch.pschatzmann.common.table.FormatException;
import ch.pschatzmann.edgar.base.errors.DataException;
import ch.pschatzmann.edgar.reporting.company.CompanyEdgarValues;
import ch.pschatzmann.edgar.reporting.company.CompanySearch;
import ch.pschatzmann.edgar.reporting.company.CompanySelection;
import ch.pschatzmann.edgar.reporting.company.FilterQuarterlyCumulated;
import ch.pschatzmann.edgar.reporting.company.FilterYearly;

public class TestCompanySelection {
	@Test
	public void testCompanyEdgarValues() throws Exception {
		CompanyEdgarValues values = new CompanyEdgarValues(new CompanySelection().setTradingSymbol("AAPL"))
			.setParameterNames("NetIncomeLoss");
		
		System.out.println(values.size());
		Assert.assertTrue(values.size()>0);
		Assert.assertTrue(((Number) values.toList().get(10).get("NetIncomeLoss")).doubleValue() > 0.0);

	}
	
	@Test
	public void testCompanyEdgarValuesYearly() throws Exception {
		CompanyEdgarValues values = new CompanyEdgarValues(new CompanySelection().setTradingSymbol("AAPL"))
			.setFilter(new FilterYearly());

		System.out.println(values.size());
		Assert.assertTrue(values.size()>0);
		Assert.assertTrue(((Number) values.toList().get(5).get("NetIncomeLoss")).doubleValue() > 0.0);

	}

	@Test
	public void testCompanyEdgarValuesQuarterlyCumulated() throws Exception {
		CompanyEdgarValues values = new CompanyEdgarValues(new CompanySelection().setTradingSymbol("AAPL"))
			.setFilter(new FilterQuarterlyCumulated());

		System.out.println(values.size());
		Assert.assertTrue(values.size()>0);
		List<Map<String,?>> list = values.toList();
		Assert.assertTrue(((Number) list.get(1).get("NetIncomeLoss")).doubleValue() > 0.0);
	}
	
	
	@Test
	public void testCompanyEdgarValuesFilter() throws ClassNotFoundException, DataException, SQLException {
		CompanyEdgarValues test = new CompanyEdgarValues(new CompanySelection().setTradingSymbol("AAPL"))
			    .setFilter(new FilterYearly(),false)
			    .setParameterNames("NetIncomeLoss","OperatingIncomeLoss","Test");
		
		List<Map<String, ?>> list = test.toList();
		Assert.assertTrue(((Number) list.get(1).get("NetIncomeLoss")).doubleValue() > 0.0);
		Assert.assertTrue(((Number)test.getTable().getValue(0, 0)).doubleValue() > 0);
		Assert.assertTrue(((Number)test.getTable().getValue(0, 1)).doubleValue() > 0);
		Assert.assertTrue(((Number)test.getTable().getValue(0, 2)).doubleValue() > 0);

	}

	@Test
	public void testCompanySearch() throws ClassNotFoundException, DataException, SQLException, FormatException {
		CompanySearch companySearch = new CompanySearch("Apple%");
		Assert.assertTrue(companySearch.size()>0);
		System.out.println(companySearch.toCsv());
	}

	@Test
	public void testCompanySearchList() throws ClassNotFoundException, DataException, SQLException, FormatException {
		CompanySearch companySearch = new CompanySearch("companyName",Arrays.asList("A%","B%"));
		Assert.assertTrue(companySearch.size()>0);
		System.out.println(companySearch.toCsv());
	}
	
	@Test
	public void testCompanySearchTicker() throws ClassNotFoundException, DataException, SQLException, FormatException {
		CompanySearch companySearch = new CompanySearch("tradingSymbol",Arrays.asList("AAPL"));
		System.out.println(companySearch.toCsv());
	}
	
	@Test
	public void testFormulas() throws ClassNotFoundException, DataException, SQLException, FormatException {
		CompanyEdgarValues test = new CompanyEdgarValues(new CompanySelection().setTradingSymbol("AAPL"))
			    .setFilter(new FilterYearly(),false)
			    .setParameterNames("NetIncomeLoss")
			    .addFormula("NetIncome", "Math.coalesce(NetIncomeLoss,OperatingIncomeLoss)")
			    .addFormula("NetIncomeMio", "NetIncomeLoss / 1000000.0")
			    .addFormula("NetIncomeLoss-1", "Edgar.lag('NetIncomeLoss',-1)");
		
		
		List<Map<String, ?>> list = test.toList();
		System.out.println(list.get(0).get("NetIncomeLoss"));
		System.out.println(list.get(1).get("NetIncomeLoss"));
		System.out.println(list.get(2).get("NetIncomeLoss"));
		System.out.println(list.get(3).get("NetIncomeLoss"));

		System.out.println(list.get(0).get("NetIncomeMio"));
		System.out.println(list.get(1).get("NetIncomeMio"));
		System.out.println(list.get(2).get("NetIncomeMio"));
		System.out.println(list.get(3).get("NetIncomeMio"));

		
		System.out.println(list.get(1).get("NetIncomeLoss-1"));
		System.out.println(list.get(2).get("NetIncomeLoss-1"));
		System.out.println(list.get(3).get("NetIncomeLoss-1"));
		System.out.println(list.get(4).get("NetIncomeLoss-1"));

		Assert.assertTrue(((Number) list.get(1).get("NetIncomeLoss")).doubleValue() > 0.0);
		Assert.assertTrue(((Number) list.get(1).get("NetIncome")).doubleValue() > 0.0);
		Assert.assertTrue(((Number) list.get(1).get("NetIncomeMio")).doubleValue() > 0.0);
	}

}
