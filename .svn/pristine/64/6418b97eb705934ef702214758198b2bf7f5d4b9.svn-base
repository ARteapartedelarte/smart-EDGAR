package ch.pschatzmann.edgar.base;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;

import javax.xml.parsers.ParserConfigurationException;

import org.jsoup.Jsoup;
import org.xml.sax.SAXException;

import ch.pschatzmann.edgar.service.EdgarFileService;

/**
 * Simple API to provide access to File filings 
 * 
 * @author pschatzmann
 *
 */
public class EdgarFiling {
	private String filing;

	public EdgarFiling(String filing) {
		this.filing = filing;
	}
	
	/**
	 * Returns the file of the filing
	 * @return
	 */
	public File getFile() {
		return EdgarFileService.getFile(filing);
	}

	/**
	 * Finds all filings which exist in the file system
	 * @param regex
	 * @return
	 * @throws Exception 
	 */
	public static List<EdgarFiling> list(String regex) throws Exception {
		return EdgarFileService.getCompanies().stream()
		   .map(c -> new EdgarFileService().getFilings(c).stream())
		   .flatMap(l -> l)
		   .filter(f -> f.matches(regex))
		   .map(f -> new EdgarFiling(f))
		   .collect(Collectors.toList());
		
	}

	/**
	 * Determines the XBRL
	 * @return
	 * @throws ParserConfigurationException 
	 * @throws IOException 
	 * @throws SAXException 
	 */
	public XBRL getXBRL() throws SAXException, IOException, ParserConfigurationException {
		XBRL result = new XBRL();
		result.setIgnoreHtml(false);
		result.setMaxFieldSize(100000000);
		result.load(EdgarFileService.getFile(filing));
		return result;
	}
	
	/**
	 * Returns the text w/o html tags
	 * @return
	 * @throws IOException 
	 */
	public String getText() throws IOException {
		ZipFile zipFile = new ZipFile(getFile());
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        StringBuffer sb = new StringBuffer();

        while(entries.hasMoreElements()) {
        	ZipEntry entry = entries.nextElement();
            InputStream is = zipFile.getInputStream(entry);
            sb.append(Jsoup.parse(is,null,"").text());
            sb.append(" ");  
        }
        return sb.toString();
	}

	/**
	 * Returns the text w/o html tags
	 * @param names
	 * @return
	 * @throws IOException
	 */
	public String getText(Collection<String> names) throws IOException {
		ZipFile zipFile = new ZipFile(getFile());
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        StringBuffer sb = new StringBuffer();

        while(entries.hasMoreElements()) {
        	ZipEntry entry = entries.nextElement();
        	if (names.contains(entry.getName())){
	            InputStream is = zipFile.getInputStream(entry);
	            sb.append(Jsoup.parse(is,null,"").text());
	            sb.append(" ");  
        	}
        }
        return sb.toString();
	}
	
	/**
	 * Returns the text w/o html tags
	 * @param regex
	 * @return
	 * @throws IOException
	 */
	public String getText(String regex) throws IOException {
		ZipFile zipFile = new ZipFile(getFile());
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        StringBuffer sb = new StringBuffer();

        while(entries.hasMoreElements()) {
        	ZipEntry entry = entries.nextElement();
        	if (entry.getName().matches(regex)){
	            InputStream is = zipFile.getInputStream(entry);
	            sb.append(Jsoup.parse(is,null,"").text());
	            sb.append(" ");  
        	}
        }
        return sb.toString();
	}

	
	/**
	 * Returns the entries of the zip reporting file
	 * @return
	 * @throws IOException 
	 * @throws ZipException 
	 */
	public List<String> getEntries() throws ZipException, IOException{
		ZipFile zipFile = new ZipFile(getFile());
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        List<String> result = new ArrayList();;
        while(entries.hasMoreElements()) {
        	ZipEntry entry = entries.nextElement();
        	result.add(entry.getName());
        }
        return result;		
	}
	
	/**
	 * Determines the form
	 * @return
	 */
	public String getForm() {
		int start = this.filing.indexOf("-");
		String result = this.filing.substring(start+1);
		int end = result.lastIndexOf("-");
		result =  result.substring(0,end);
		return result;
	}

	/**
	 * Provides the CompanyInfo for the filing
	 * @return
	 */
	public CompanyInfo getCompanyInfo() {
		int end = this.filing.indexOf("-");
		return new CompanyInfo(filing.substring(0, end));
	}

	/**
	 * Provides the date as yyyy-MM-dd
	 * @return
	 */
	public String getDate() {
		int start = this.filing.lastIndexOf("-");
		String date = filing.substring(start+1);
		StringBuffer sb = new StringBuffer();
		sb.append(date.substring(0,4));
		sb.append("-");
		sb.append(date.substring(4,6));
		sb.append("-");
		sb.append(date.substring(6));
		return sb.toString();
	}
	
	/**
	 * Provides the filing id
	 * @return
	 */
	public String getFiling() {
		return this.filing;
	}

}
