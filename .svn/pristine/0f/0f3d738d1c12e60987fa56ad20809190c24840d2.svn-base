package ch.pschatzmann.edgar.dataload.rss;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

import org.apache.log4j.Logger;

import ch.pschatzmann.edgar.utils.Utils;

/**
 * Collection of Edgar FeedInfo information that can be accessed with the key
 * 
 * @author pschatzmann
 *
 */
public class FeedInfoFile {
	private static final Logger LOG = Logger.getLogger(FeedInfoFile.class);
	private Map<String, FeedInfoRecord> index = new TreeMap();
	private List<String> cikNumbers = null;
	private String indexFile = null;
	private File file = null;

	/**
	 * Constructor - We load the index
	 * 
	 * @throws IOException
	 */
	public FeedInfoFile() throws IOException {
//		try {
//			indexFile = Utils.getProperty("indexFileName", "/Users/pschatzmann/Downloads/index.csv");
//			file = new File(indexFile);
//			if (file.exists()) {
//				loadIndex(file);
//			}
//		} catch (Exception ex) {
//			LOG.error("Could not load index ", ex);
//		}
	}

	public FeedInfoFile(String fileName) throws IOException {
		indexFile = fileName;
		file = new File(indexFile);
		loadIndex(file);
	}

	/**
	 * Returns the file with the index
	 * 
	 * @return file
	 */
	public File getFile() {
		return file;
	}

	/**
	 * Load the index information
	 * 
	 * @param file
	 * @throws IOException
	 */
	private void loadIndex(File file) throws IOException {
		try {
			Files.lines(file.toPath()).forEach(line -> processLine(line));
		} catch (NoSuchFileException ex) {
			LOG.warn(ex);
		}
	}

	private void processLine(String str) {
		try {
			FeedInfoRecord fi = new FeedInfoRecord(str);
			index.put(fi.getKey(), fi);
		} catch (Exception ex) {
			LOG.error(ex, ex);
		}
	}

	/**
	 * Determines the FeedInfo for the key.
	 * 
	 * @param key
	 * @return
	 */

	public FeedInfoRecord get(String key) {
		return this.index.get(key);
	}

	/**
	 * Adds an entry into the index
	 * 
	 * @param key
	 * @param value
	 */

	public void put(String key, FeedInfoRecord value) {
		put(key, value);
	}

	/**
	 * Determines the size of the index
	 * 
	 * @return
	 */
	public int size() {
		return index.size();
	}

	/**
	 * Determines the set of all different existing CIK numbers which have
	 * filings
	 * 
	 * @return
	 */

	public List<String> getCikNumbers() {
		if (cikNumbers == null) {
			cikNumbers = new ArrayList(index.values().stream().map(fi -> fi.getCIKNumber()).collect(Collectors.toSet()));
			Collections.sort(cikNumbers);
		}
		return cikNumbers;
	}

	/**
	 * Returns all the filings for the indicated CIK number
	 * 
	 * @param number
	 * @return
	 */
	public Collection<FeedInfoRecord> getFeedInfoByCikNumber(String number) {
		return index.values().stream().filter(fi -> fi.getCIKNumber().equals(number)).collect(Collectors.toList());
	}

	/**
	 * Returns all filings
	 * 
	 * @return
	 */
	public Collection<FeedInfoRecord> getFeedInfo() {
		return index.values();
	}

}
