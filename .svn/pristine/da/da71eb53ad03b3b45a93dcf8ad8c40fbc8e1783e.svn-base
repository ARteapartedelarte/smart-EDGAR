package ch.pschatzmann.edgar.reporting.company;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import ch.pschatzmann.common.table.FilteredTable;
import ch.pschatzmann.common.table.FormatException;
import ch.pschatzmann.common.table.ITable;
import ch.pschatzmann.common.table.TableFormatterCSV;
import ch.pschatzmann.common.table.TableFormatterHtml;
import ch.pschatzmann.common.table.TableFormatterJson;
import ch.pschatzmann.edgar.base.errors.DataException;
import ch.pschatzmann.edgar.reporting.EdgarModel;
import ch.pschatzmann.edgar.reporting.Table;

/**
 * Provides the reported parameter values for a company by date. Per default we use
 * the QuarterlyCumulated filter
 * 
 * @author pschatzmann
 *
 */
public class CompanyEdgarValues {
	private ITable table;
	private ITable filteredTable;

	public CompanyEdgarValues(String identifier) throws DataException, ClassNotFoundException, SQLException {
		this(identifier, "USD");
	}
	
	public CompanyEdgarValues(String identifier, String unitRef) throws DataException, ClassNotFoundException, SQLException {
		EdgarModel model = new EdgarModel();
		model.setup();
		model.getTableField("values", "unitref").setFilterValues(Arrays.asList(unitRef));
		model.getTableField("values", "segment").setFilterValues(Arrays.asList(""));
		model.getTableField("values", "segmentdimension").setFilterValues(Arrays.asList(""));
		model.getTableField("values", "identifier").setFilterValues(Arrays.asList(identifier));

		Table table = new Table();
		table.setValueField(model.getTable("values").getValueField());
		table.addColumn(model.getNavigationField("values", "parameter", null));
		table.addRow(model.getNavigationField("values", "date", null));
		table.addRow(model.getNavigationField("company", "companyName", null));
		table.addRow(model.getNavigationField("company", "tradingSymbol", null));
		table.addRow(model.getNavigationField("company", "incorporation", null));
		table.addRow(model.getNavigationField("company", "location", null));
		table.addRow(model.getNavigationField("company", "sicDescription", null));
		table.addRow(model.getNavigationField("values", "identifier", null));
		table.addRow(model.getNavigationField("values", "form", null));
		table.addRow(model.getNavigationField("values", "numberOfMonths", null));

		table.execute(model);
		this.table = table;
		this.setFilter(new FilterQuarterlyCumulated(this.table));
	}

	public void setFilter(Function<Integer, Boolean> filter) {
		this.filteredTable = new FilteredTable(this.table, filter);
	}

	public String toCsv() throws FormatException {
		return new TableFormatterCSV().format(filteredTable);
	}

	public String toHtml() throws FormatException {
		return new TableFormatterHtml().format(filteredTable);
	}

	public String toJson() throws FormatException {
		return new TableFormatterJson().format(filteredTable);
	}

	public List<Map<String, ?>> toList() {
		return table.toList();
	}

}
