package ch.pschatzmann.edgar.reporting;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

import org.apache.log4j.Logger;

import ch.pschatzmann.common.table.ITable;
import ch.pschatzmann.common.table.TableConsolidated.RowKey;
import ch.pschatzmann.edgar.base.errors.DataException;
import ch.pschatzmann.edgar.reporting.Table.CombinedKey;
import ch.pschatzmann.edgar.reporting.Table.Key;
import ch.pschatzmann.edgar.utils.Utils;

/**
 * Table representation of data where the numerical values are split up in
 * columns and rows.
 * 
 * @author pschatzmann
 *
 */
public class Table implements ITable {
	private static final Logger LOG = Logger.getLogger(Table.class);
	private static final long serialVersionUID = 1L;
	private List<NavigationField> rows = new ArrayList<NavigationField>();
	private List<NavigationField> columns = new ArrayList<NavigationField>();
	private NavigationField valueField;
	private List<Key> dataRows = new ArrayList<Key>();
	private List<Key> dataColumns = new ArrayList<Key>();
	private Map<Key, Key> rowKeyMap = new HashMap<Key, Key>();
	private Map<Key, Key> colKeyMap = new HashMap<Key, Key>();
	private Map<CombinedKey, Number> valueMap = new HashMap<CombinedKey, Number>();

	/**
	 * Determines the value field (= source of numerical values)
	 * 
	 * @return
	 */
	public NavigationField getValueField() {
		return valueField;
	}

	/**
	 * Defines the value field
	 * 
	 * @param fld
	 */
	public void setValueField(NavigationField fld) {
		this.valueField = fld;
	}

	/**
	 * Determine the rows of the result table
	 * 
	 * @return
	 */
	public List<NavigationField> getRows() {
		return this.rows;
	}

	/**
	 * Determine the columns of the result table
	 * 
	 * @return
	 */
	public List<NavigationField> getColumns() {
		return this.columns;
	}

	/**
	 * Determines the group by fields
	 * 
	 * @return
	 */
	protected Collection<NavigationField> getGroupFields() {
		Collection<NavigationField> result = new ArrayList<NavigationField>();
		result.addAll(this.getColumns());
		result.addAll(this.getRows());
		return result;
	}
	
	/**
	 * Defines a new model row
	 * 
	 * @param row
	 */

	public void addRow(NavigationField row) {
		this.rows.add(row);
	}

	/**
	 * Defines a new model column
	 * 
	 * @param col
	 */
	public void addColumn(NavigationField col) {
		this.columns.add(col);		
	}

	/**
	 * Clears the rows and columns
	 */
	public void clear() {
		this.getRows().clear();
		this.getColumns().clear();
	}

	/**
	 * Determines the field names of the header column
	 * 
	 * @return
	 */
	public List<String> getColumnFieldNames() {
		return getFieldNames(this.columns);
	}

	public String getColumnFieldName(int col) {
		return getFieldNames(this.columns).get(col);
	}

	public int getColumnFieldCount() {
		return getFieldNames(this.columns).size();
	}

	public List<String> getRowFieldNames() {
		return getFieldNames(this.rows);
	}

	public String getRowFieldName(int row) {
		return getFieldNames(this.rows).get(row);
	}

	public int getRowFieldCount() {
		return getFieldNames(this.rows).size();
	}

	protected List<String> getFieldNames(List<NavigationField> fields) {
		return fields.stream().map(f -> f.getFieldName()).collect(Collectors.toList());
	}

	public int getColumnCount() {
		return this.dataColumns.size();
	}

	public int getRowCount() {
		return this.dataRows.size();
	}

	public Number getValue(int col, int row) {
		CombinedKey key = new CombinedKey(dataColumns.get(col), dataRows.get(row));
		Number result = valueMap.get(key);
		//LOG.info("getValue: "+key+" -> "+result);
		return result;
	}

	public String getValueFieldName() {
		return this.valueField.getFieldName();
	}

	/**
	 * Determines the value of the indicated row
	 * 
	 * @param row
	 * @return
	 */
	public List<String> getRowValue(int row) {
		return this.dataRows.get(row).getKeyValues();
	}

	/**
	 * Determines the value of the indicated column
	 * 
	 * @param col
	 * @return
	 */
	public List<String> getColumnValue(int col) {
		return this.dataColumns.get(col).getKeyValues();
	}

	/**
	 * Adds the record from the result set to the table
	 * 
	 * @param values
	 * @throws SQLException
	 */
	public void putRecord(ResultSet values) throws SQLException {
		Number value = null;
		if (this.getValueField()!=null) {
			values.getBigDecimal(this.getValueFieldName());
		}
		Key rowKey = addRowKey(values);
		Key colKey = addColumnKey(values);
		LOG.info(colKey+"/"+rowKey+": "+value);
		this.valueMap.put(new CombinedKey(colKey, rowKey), value);
	}

	protected Key addRowKey(ResultSet values) throws SQLException {
		List<String> row = new ArrayList<String>();
		for (int j = 0; j < this.getRowFieldCount(); j++) {
			row.add(values.getString(this.getRowFieldName(j)));
		}
		Key rowKeySearch = new Key(row);
		Key rowKey = this.rowKeyMap.get(rowKeySearch);
		if (rowKey == null) {
			rowKey = rowKeySearch;
			this.dataRows.add(rowKey);
			this.rowKeyMap.put(rowKey, rowKey);
		}
		return rowKey;
	}

	protected Key addColumnKey(ResultSet values) throws SQLException {
		List<String> col = new ArrayList<String>();
		for (int j = 0; j < this.getColumnFieldCount(); j++) {
			col.add(values.getString(this.getColumnFieldName(j)));
		}
		Key colKeySearch = new Key(col);
		Key colKey = this.colKeyMap.get(colKeySearch);
		if (colKey == null) {
			colKey = colKeySearch;
			this.dataColumns.add(colKey);
			this.colKeyMap.put(colKey, colKey);
		}
		return colKey;
	}

	/**
	 * Executes the SQL command against the database and adds all found records
	 * 
	 * @param model
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 * @throws DataException 
	 */
	public void execute(EdgarModel model) throws SQLException, ClassNotFoundException, DataException {
		String sql = model.toSQL(this);
		DBMS db = DBMS.getInstance();
		db.execute(sql, this);
		Collections.sort(dataRows, new KeyComparator());
		Collections.sort(dataColumns, new KeyComparator());
	}

	public String getColumnTitle(int col) {
		StringBuffer sb = new StringBuffer();
		boolean firstTitle = true;
		for (String f : this.getColumnValue(col)) {
			if (!firstTitle)
				sb.append(" ");
			firstTitle = false;
			sb.append(f);
		}
		if (firstTitle) {
			sb.append("Total");
		}
		return sb.toString();
	}

	protected List<Key> getDataRows() {
		return this.dataRows;
	}

	public class Key implements Comparable<Key> {
		private List<String> keyValues;

		public Key(List<String> keyValues) {
			this.keyValues = keyValues;
		}

		public List<String> getKeyValues() {
			return keyValues;
		}

		public int size() {
			return keyValues.size();
		}

		public String get(int index) {
			String value = getKeyValues().get(index);
			return value == null ? "" : value;
		}

		@Override
		public int hashCode() {
			int hashCode = 0;
			for (String s : keyValues) {
				hashCode = hashCode | s.hashCode();
			}
			return hashCode;
		}

		@Override
		public int compareTo(Key o) {
			int result = 0;
			for (int j = 0; j < size(); j++) {
				result = get(j).compareTo(o.get(j));
				if (result != 0) {
					return result;
				}
			}
			return result;
		}
		
		@Override
		public boolean equals(final Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final Key other = (Key) obj;
			return compareTo(other) == 0;
		}
		
		public String toString() {
			return this.keyValues.toString();
		}
	}

	public class CombinedKey implements Comparable<CombinedKey> {
		private Key rowKey;
		private Key colKey;

		public CombinedKey(Key colKey, Key rowKey) {
			this.rowKey = rowKey;
			this.colKey = colKey;
		}

		public Key getColKey() {
			return colKey;
		}

		public Key getRowKey() {
			return rowKey;
		}

		@Override
		public int hashCode() {
			return rowKey.hashCode() | colKey.hashCode();
		}

		@Override
		public int compareTo(CombinedKey o) {
			int result = this.getRowKey().compareTo(o.getRowKey());
			if (result == 0) {
				result = this.getColKey().compareTo(o.getColKey());
			}
			return result;
		}
		
		@Override
		public boolean equals(final Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final CombinedKey other = (CombinedKey) obj;
			return compareTo(other) == 0;
		}
		
		@Override
		public String toString() {
			return this.colKey.toString()+"/"+this.rowKey.toString();
		}
	}
	
	/**
	 * Used for sorting the rows and columns
	 * @author pschatzmann
	 *
	 */
	class KeyComparator implements Comparator<Key> {
		@Override
		public int compare(Key o1, Key o2) {
			int result = ((Integer)o1.size()).compareTo(o2.size());
			if (result==0) {
				for (int j=0; j<o1.size(); j++) {
					result = o1.get(j).compareTo(o2.get(j));
					if (result!=0) {
						return result;
					}
				}
			}
			return 0;
		}
		
	}
}
